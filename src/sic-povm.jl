"""
    sic_povm([T=ComplexF64,] d::Integer)

Constructs a vector of `d²` vectors |vᵢ⟩ such that |vᵢ⟩⟨vᵢ| forms a SIC-POVM of dimension `d`.
This construction is based on the Weyl-Heisenberg fiducial.

Reference: Appleby, Yadsan-Appleby, Zauner, [arXiv:1209.1813](http://arxiv.org/abs/1209.1813)
"""
function sic_povm(::Type{T}, d::Integer) where {T}
    fiducial = _fiducial_WH(T, d)
    vecs = Vector{Vector{T}}(undef, d^2)
    for p ∈ 0:d-1, q ∈ 0:d-1
        vecs[d*p+q+1] = shiftclock(fiducial, p, q)
    end
    sqrt_d = _sqrt(T, d)
    for vi ∈ vecs
        vi ./= sqrt_d * norm(vi)
    end
    return vecs
end
sic_povm(d::Integer) = sic_povm(ComplexF64, d)
export sic_povm

"""
    test_sic(vecs)

Checks if `vecs` is a vector of `d²` vectors |vᵢ⟩ such that |vᵢ⟩⟨vᵢ| forms a SIC-POVM of dimension `d`.
"""
function test_sic(vecs::Vector{Vector{T}}) where {T<:Number}
    d = length(vecs[1])
    length(vecs) == d^2 || throw(ArgumentError("Number of vectors must be d² = $(d^2), got $(length(vecs))."))
    normalization = inv(T(d^2))
    symmetry = inv(T(d^2 * (d + 1)))
    for j ∈ 1:d^2, i ∈ 1:j
        inner_product = abs2(dot(vecs[i], vecs[j]))
        if i == j
            deviation = abs2(inner_product - normalization)
        else
            deviation = abs2(inner_product - symmetry)
        end
        if deviation > _eps(T)
            return false
        end
    end
    return true
end
export test_sic

"""
    _fiducial_WH([T=ComplexF64,] d::Integer)

Computes the fiducial Weyl-Heisenberg vector of dimension `d`.

References:
- Appleby, Yadsan-Appleby, Zauner, [arXiv:1209.1813](http://arxiv.org/abs/1209.1813)
- [www.gerhardzauner.at/sicfiducials.html](http://www.gerhardzauner.at/sicfiducials.html)
"""
function _fiducial_WH(::Type{T}, d::Integer) where {T}
    R = real(T)
    if d == 1
        return T[1]
    elseif d == 2
        return T[sqrt((1 + 1 / sqrt(R(3))) / 2), exp(im * R(π) / 4) * sqrt((1 - 1 / sqrt(R(3))) / 2)]
    elseif d == 3
        return T[0, 1, 1]
    elseif d == 4
        a = sqrt(R(5))
        r = sqrt(R(2))
        b = im * sqrt(a + 1)
        return T[
            R(1) / 40 * (-a + 5) * r + R(1) / 20 * (-a + 5),
            ((-R(1) / 40 * a * r - R(1) / 40 * a) * b + (R(1) / 80 * (a - 5) * r + R(1) / 40 * (a - 5))) * im +
            -R(1) / 40 * a * b +
            R(1) / 80 * (-a + 5) * r,
            R(1) / 40 * (a - 5) * r * im,
            ((R(1) / 40 * a * r + R(1) / 40 * a) * b + (R(1) / 80 * (a - 5) * r + R(1) / 40 * (a - 5))) * im +
            R(1) / 40 * a * b +
            R(1) / 80 * (-a + 5) * r
        ]
    elseif d == 5
        a = sqrt(R(3))
        r = sqrt(R(5))
        t = sin(R(π) / 5)
        b = im * sqrt(5a + (5 + 3r) * t)
        return T[
            R(1) / 60 * (-a + 3) * r + R(1) / 12 * (-a + 3),
            (
                ((R(1) / 120 * a * r + R(1) / 40 * a) * t + (-R(1) / 240 * a * r + R(1) / 240 * a)) * b +
                (R(1) / 120 * (a - 3) * r * t + (R(1) / 32 * (-a + 1) * r + R(1) / 32 * (-a + 1)))
            ) * im +
            ((-R(1) / 120 * a * r - R(1) / 120 * a) * t - R(1) / 120 * a) * b +
            R(1) / 40 * (a - 1) * r * t +
            R(1) / 160 * (-a + 3) * r +
            R(1) / 96 * (a - 3),
            (
                (
                    (-R(1) / 80 * a * r + R(1) / 240 * (-7a + 6)) * t +
                    (R(1) / 480 * (-a + 9) * r + R(1) / 480 * (-a + 15))
                ) * b + (R(1) / 120 * (-a + 3) * r * t + (R(1) / 32 * (-a + 1) * r + R(1) / 32 * (-a + 1)))
            ) * im +
            (
                (R(1) / 240 * (2a + 3) * r + R(1) / 240 * (4a + 3)) * t +
                (R(1) / 480 * (-a - 3) * r + R(1) / 160 * (-a - 5))
            ) * b +
            R(1) / 40 * (-a + 1) * r * t +
            R(1) / 160 * (-a + 3) * r +
            R(1) / 96 * (a - 3),
            (
                ((R(1) / 80 * a * r + R(1) / 240 * (7a - 6)) * t + (R(1) / 480 * (a - 9) * r + R(1) / 480 * (a - 15))) *
                b + (R(1) / 120 * (-a + 3) * r * t + (R(1) / 32 * (-a + 1) * r + R(1) / 32 * (-a + 1)))
            ) * im +
            (
                (R(1) / 240 * (-2a - 3) * r + R(1) / 240 * (-4a - 3)) * t +
                (R(1) / 480 * (a + 3) * r + R(1) / 160 * (a + 5))
            ) * b +
            R(1) / 40 * (-a + 1) * r * t +
            R(1) / 160 * (-a + 3) * r +
            R(1) / 96 * (a - 3),
            (
                ((-R(1) / 120 * a * r - R(1) / 40 * a) * t + (R(1) / 240 * a * r - R(1) / 240 * a)) * b +
                (R(1) / 120 * (a - 3) * r * t + (R(1) / 32 * (-a + 1) * r + R(1) / 32 * (-a + 1)))
            ) * im +
            ((R(1) / 120 * a * r + R(1) / 120 * a) * t + R(1) / 120 * a) * b +
            R(1) / 40 * (a - 1) * r * t +
            R(1) / 160 * (-a + 3) * r +
            R(1) / 96 * (a - 3)
        ]
    elseif d == 6
        a = sqrt(R(21))
        r = [sqrt(R(2)), sqrt(R(3))]
        b = [im * sqrt(2a + 6), 2real((1 + im * sqrt(R(7)))^(R(1) / 3))]
        return T[
            (
                R(1) / 1008 * (-a + 3) * r[2] * b[1] * b[2]^2 +
                R(1) / 504 * (a - 6) * r[2] * b[1] * b[2] +
                (R(1) / 168 * (a - 2) * r[2] - R(1) / 168 * a) * b[1]
            ) * im +
            R(1) / 504 * (-a + 5) * r[2] * b[2]^2 +
            R(1) / 504 * (a + 1) * r[2] * b[2] +
            R(1) / 504 * (-a - 13) * r[2] +
            R(1) / 168 * (a + 21),
            (
                (R(1) / 2016 * (-a + 3) * r[2] * b[1] + (R(1) / 504 * (a - 7) * r[2] + R(1) / 336 * (a - 5))) * b[2]^2 +
                (
                    (R(1) / 1008 * (a - 6) * r[2] + R(1) / 672 * (-a + 7)) * b[1] +
                    (R(1) / 1008 * (-a - 7) * r[2] + R(1) / 336 * (-a - 1))
                ) * b[2] +
                (
                    (R(1) / 672 * (a + 3) * r[2] + R(1) / 672 * (-3a + 7)) * b[1] +
                    (R(1) / 504 * (-3a + 14) * r[2] + R(1) / 168 * (-a - 4))
                )
            ) * im +
            (
                (R(1) / 1008 * (-a + 3) * r[2] + R(1) / 672 * (a - 3)) * b[1] +
                (R(1) / 1008 * (-3a + 7) * r[2] - R(1) / 84)
            ) * b[2]^2 +
            (
                (R(1) / 2016 * (a - 3) * r[2] - R(1) / 336) * b[1] +
                (R(1) / 1008 * (5a - 7) * r[2] + R(1) / 336 * (a - 5))
            ) * b[2] +
            (R(1) / 224 * (a - 5) * r[2] + R(1) / 672 * (-7a + 19)) * b[1] +
            R(1) / 72 * (a - 4) * r[2] +
            R(1) / 168 * (-a + 22),
            (
                (R(1) / 672 * (-a + 3) * r[2] * b[1] + R(1) / 336 * (a - 5)) * b[2]^2 +
                (R(1) / 336 * r[2] * b[1] + R(1) / 336 * (-a - 1)) * b[2] +
                (
                    (R(1) / 672 * (5a - 19) * r[2] + R(1) / 224 * (-a + 7)) * b[1] +
                    (R(1) / 336 * (5a - 21) * r[2] + R(1) / 336 * (-5a + 13))
                )
            ) * im +
            (R(1) / 672 * (-a + 3) * b[1] + R(1) / 1008 * (a - 5) * r[2]) * b[2]^2 +
            (R(1) / 336 * b[1] + R(1) / 1008 * (-a - 1) * r[2]) * b[2] +
            (R(1) / 672 * (-a + 7) * r[2] + R(1) / 672 * (5a - 19)) * b[1] +
            R(1) / 1008 * (-5a + 13) * r[2] +
            R(1) / 336 * (5a - 21),
            (
                (R(1) / 504 * (a - 3) * r[2] * b[1] + R(1) / 504 * (a - 1) * r[2]) * b[2]^2 +
                (R(1) / 1008 * (-a + 3) * r[2] * b[1] + R(1) / 252 * (-a + 2) * r[2]) * b[2] +
                (R(1) / 168 * (-a + 4) * r[2] * b[1] + R(1) / 504 * (-9a + 11) * r[2])
            ) * im +
            (R(1) / 1008 * (a - 3) * r[2] * b[1] - R(1) / 126 * r[2]) * b[2]^2 +
            (R(1) / 1008 * (a - 9) * r[2] * b[1] + R(1) / 504 * (a - 5) * r[2]) * b[2] +
            R(1) / 168 * (-a + 2) * r[2] * b[1] +
            R(1) / 504 * (-5a + 23) * r[2],
            (
                (R(1) / 2016 * (-a + 3) * r[2] * b[1] + R(1) / 336 * (-a + 1)) * b[2]^2 +
                (R(1) / 2016 * (-a + 9) * r[2] * b[1] + R(1) / 168 * (a - 2)) * b[2] +
                (
                    (R(1) / 672 * (a + 3) * r[2] + R(1) / 672 * (a - 21)) * b[1] +
                    (R(1) / 168 * a * r[2] + R(1) / 168 * (3a - 16))
                )
            ) * im +
            (R(1) / 672 * (-a + 3) * b[1] + R(1) / 1008 * (a + 7) * r[2]) * b[2]^2 +
            (R(1) / 672 * (a - 5) * b[1] + R(1) / 504 * (-2a + 7) * r[2]) * b[2] +
            (R(1) / 672 * (3a - 7) * r[2] + R(1) / 672 * (a - 5)) * b[1] +
            R(1) / 504 * (-a - 28) * r[2] +
            R(1) / 168 * a,
            (
                (R(1) / 672 * (a - 3) * b[1] + (R(1) / 1008 * (-a + 1) * r[2] + R(1) / 84)) * b[2]^2 +
                (
                    (R(1) / 672 * (a - 7) * r[2] + R(1) / 672 * (-a + 5)) * b[1] +
                    (R(1) / 504 * (a - 2) * r[2] + R(1) / 336 * (-a + 5))
                ) * b[2] +
                (
                    (R(1) / 672 * (a - 7) * r[2] + R(1) / 672 * (-3a + 5)) * b[1] +
                    (R(1) / 1008 * (3a - 11) * r[2] + R(1) / 336 * (-a - 23))
                )
            ) * im +
            (R(1) / 672 * (-a + 3) * r[2] * b[1] + (R(1) / 252 * r[2] + R(1) / 336 * (a - 1))) * b[2]^2 +
            (
                (R(1) / 672 * (a - 5) * r[2] + R(1) / 672 * (a - 7)) * b[1] +
                (R(1) / 1008 * (-a + 5) * r[2] + R(1) / 168 * (-a + 2))
            ) * b[2] +
            (R(1) / 672 * (3a - 5) * r[2] + R(1) / 672 * (a - 7)) * b[1] +
            R(1) / 1008 * (-a - 23) * r[2] +
            R(1) / 336 * (-3a + 11)
        ]
    elseif d == 7
        a = sqrt(R(2))
        r = sqrt(R(7))
        t = cos(R(π) / 7)
        b = im * sqrt(2a + 1)
        return T[
            R(1) / 14 * (a + 1),
            (
                (R(1) / 196 * (a - 4) * r * t^2 + R(1) / 392 * (3a + 2) * r * t + R(1) / 392 * (a + 3) * r) * b +
                (R(1) / 196 * (a + 6) * r * t^2 + R(1) / 392 * (-3a - 4) * r * t + R(1) / 392 * (-5a - 9) * r)
            ) * im +
            (-R(1) / 28 * a * t^2 + R(1) / 56 * (a - 2) * t + R(1) / 56 * (a - 1)) * b +
            R(1) / 28 * (3a + 6) * t^2 +
            R(1) / 56 * (-a - 4) * t +
            R(1) / 56 * (-3a - 5),
            (
                (R(1) / 196 * (3a + 2) * r * t^2 + R(1) / 196 * (-2a + 1) * r * t + R(1) / 784 * (a - 4) * r) * b +
                (R(1) / 196 * (-3a - 4) * r * t^2 + R(1) / 196 * (a - 1) * r * t + R(1) / 784 * (-5a - 2) * r)
            ) * im +
            (R(1) / 28 * (a - 2) * t^2 + R(1) / 28 * t - R(1) / 112 * a) * b +
            R(1) / 28 * (-a - 4) * t^2 +
            R(1) / 28 * (-a - 1) * t +
            R(1) / 112 * (a + 6),
            (
                (R(1) / 98 * (2a - 1) * r * t^2 + R(1) / 392 * (-a + 4) * r * t + R(1) / 784 * (-11a + 2) * r) * b +
                (R(1) / 98 * (a - 1) * r * t^2 + R(1) / 392 * (a + 6) * r * t + R(1) / 784 * (-13a - 8) * r)
            ) * im +
            (-R(1) / 14 * t^2 + R(1) / 56 * a * t + R(1) / 112 * (-a + 6)) * b +
            R(1) / 14 * (-a - 1) * t^2 +
            R(1) / 56 * (3a + 6) * t +
            R(1) / 112 * a,
            (
                (R(1) / 98 * (-2a + 1) * r * t^2 + R(1) / 392 * (a - 4) * r * t + R(1) / 784 * (11a - 2) * r) * b +
                (R(1) / 98 * (a - 1) * r * t^2 + R(1) / 392 * (a + 6) * r * t + R(1) / 784 * (-13a - 8) * r)
            ) * im +
            (R(1) / 14 * t^2 - R(1) / 56 * a * t + R(1) / 112 * (a - 6)) * b +
            R(1) / 14 * (-a - 1) * t^2 +
            R(1) / 56 * (3a + 6) * t +
            R(1) / 112 * a,
            (
                (R(1) / 196 * (-3a - 2) * r * t^2 + R(1) / 196 * (2a - 1) * r * t + R(1) / 784 * (-a + 4) * r) * b +
                (R(1) / 196 * (-3a - 4) * r * t^2 + R(1) / 196 * (a - 1) * r * t + R(1) / 784 * (-5a - 2) * r)
            ) * im +
            (R(1) / 28 * (-a + 2) * t^2 - R(1) / 28 * t + R(1) / 112 * a) * b +
            R(1) / 28 * (-a - 4) * t^2 +
            R(1) / 28 * (-a - 1) * t +
            R(1) / 112 * (a + 6),
            (
                (R(1) / 196 * (-a + 4) * r * t^2 + R(1) / 392 * (-3a - 2) * r * t + R(1) / 392 * (-a - 3) * r) * b +
                (R(1) / 196 * (a + 6) * r * t^2 + R(1) / 392 * (-3a - 4) * r * t + R(1) / 392 * (-5a - 9) * r)
            ) * im +
            (R(1) / 28 * a * t^2 + R(1) / 56 * (-a + 2) * t + R(1) / 56 * (-a + 1)) * b +
            R(1) / 28 * (3a + 6) * t^2 +
            R(1) / 56 * (-a - 4) * t +
            R(1) / 56 * (-3a - 5)
        ]
    elseif d == 8
        a = sqrt(R(5))
        r1 = sqrt(R(2))
        t = cos(R(π) / 8)
        b1 = im * sqrt(a - 1)
        return T[
            R(1) / 24 * (-a + 3),
            ((R(1) / 24 * t - R(1) / 48 * r1) * b1 + (R(1) / 48 * (-a + 3) * r1 * t + R(1) / 48 * (-a + 3))) * im +
            ((R(1) / 24 * r1 - R(1) / 24) * t - R(1) / 48 * r1) * b1 +
            (R(1) / 48 * (a - 3) * r1 + R(1) / 24 * (-a + 3)) * t +
            R(1) / 48 * (a - 3),
            -R(1) / 24 * r1 * b1 * im,
            ((R(1) / 24 * t + R(1) / 48 * r1) * b1 + (R(1) / 48 * (a - 3) * r1 * t + R(1) / 48 * (-a + 3))) * im +
            ((R(1) / 24 * r1 - R(1) / 24) * t + R(1) / 48 * r1) * b1 +
            (R(1) / 48 * (-a + 3) * r1 + R(1) / 24 * (a - 3)) * t +
            R(1) / 48 * (a - 3),
            R(1) / 24 * (a - 3),
            ((-R(1) / 24 * t - R(1) / 48 * r1) * b1 + (R(1) / 48 * (a - 3) * r1 * t + R(1) / 48 * (-a + 3))) * im +
            ((-R(1) / 24 * r1 + R(1) / 24) * t - R(1) / 48 * r1) * b1 +
            (R(1) / 48 * (-a + 3) * r1 + R(1) / 24 * (a - 3)) * t +
            R(1) / 48 * (a - 3),
            R(1) / 24 * r1 * b1 * im,
            ((-R(1) / 24 * t + R(1) / 48 * r1) * b1 + (R(1) / 48 * (-a + 3) * r1 * t + R(1) / 48 * (-a + 3))) * im +
            ((-R(1) / 24 * r1 + R(1) / 24) * t + R(1) / 48 * r1) * b1 +
            (R(1) / 48 * (a - 3) * r1 + R(1) / 24 * (-a + 3)) * t +
            R(1) / 48 * (a - 3)
        ]
    elseif d == 9
        a = sqrt(R(15))
        r1 = sqrt(R(3))
        t = cos(R(π) / 9)
        b1 = im * sqrt(2 * a + 4 * r1)
        b2 = 2 * real((6 + 6 * im * sqrt(R(5)))^(R(1) / 3))
        return T[
            (R(1) / 72 * r1 - R(1) / 120 * a) * b1 * im + R(1) / 360 * (a - 5) * r1 + R(1) / 120 * (a + 5),
            (
                (
                    (
                        (R(1) / 1620 * (a - 3) * r1 + R(1) / 540 * (a - 3)) * t^2 +
                        (R(1) / 3240 * (a + 3) * r1 + R(1) / 2160 * (-a - 3)) * t +
                        (R(1) / 3240 * (-a + 3) * r1 + R(1) / 1080 * (-a + 3))
                    ) * b1 + (R(1) / 90 * t^2 - R(1) / 360 * t - R(1) / 180)
                ) * b2^2 +
                (
                    (
                        (R(1) / 90 * r1 + R(1) / 180 * (-a + 1)) * t^2 +
                        (-R(1) / 180 * r1 + R(1) / 360 * (a - 2)) * t +
                        (-R(1) / 180 * r1 + R(1) / 360 * (a - 1))
                    ) * b1 + (-R(1) / 90 * t^2 + R(1) / 360 * (-a + 1) * t + R(1) / 180)
                ) * b2 +
                (
                    (
                        (R(1) / 270 * (-a + 1) * r1 + R(1) / 45 * (-a + 3)) * t^2 +
                        (R(1) / 1080 * (-4 * a - 7) * r1 + R(1) / 360 * (a + 6)) * t +
                        (R(1) / 1080 * (3 * a - 17) * r1 + R(1) / 60 * (a - 2))
                    ) * b1 + (
                        (R(1) / 90 * (-a + 5) * r1 + R(1) / 90 * (a - 17)) * t^2 +
                        (R(1) / 360 * (-a - 5) * r1 + R(1) / 360 * (-a + 17)) * t +
                        (-R(1) / 36 * r1 + R(1) / 180 * (-a + 17))
                    )
                )
            ) * im +
            (
                (
                    (-R(1) / 270 * r1 + R(1) / 540 * (a + 1)) * t^2 +
                    (R(1) / 2160 * (-a + 5) * r1 + R(1) / 1080 * (-a + 1)) * t +
                    (R(1) / 540 * r1 + R(1) / 1080 * (-a - 1))
                ) * b1 - R(1) / 360 * r1 * t
            ) * b2^2 +
            (
                (
                    (R(1) / 540 * (a - 3) * r1 - R(1) / 90) * t^2 +
                    (R(1) / 1080 * a * r1 - R(1) / 180) * t +
                    (R(1) / 1080 * (-a + 3) * r1 + R(1) / 180)
                ) * b1 + (-R(1) / 270 * a * r1 * t^2 + R(1) / 1080 * (a + 3) * r1 * t + R(1) / 540 * a * r1)
            ) * b2 +
            (
                (R(1) / 270 * (a + 12) * r1 + R(1) / 270 * (-7 * a - 6)) * t^2 +
                (R(1) / 216 * (a - 6) * r1 + R(1) / 1080 * (16 * a - 27)) * t +
                (R(1) / 1080 * (-5 * a - 24) * r1 + R(1) / 1080 * (11 * a + 42))
            ) * b1 +
            R(1) / 45 * a * t^2 +
            (R(1) / 360 * (a + 7) * r1 + R(1) / 72 * (-a + 3)) * t +
            R(1) / 360 * (-a + 5) * r1 +
            R(1) / 360 * (-a - 15),
            (
                (
                    (
                        (R(1) / 6480 * (-a + 15) * r1 + R(1) / 2160 * (-a - 3)) * t^2 +
                        (R(1) / 12960 * (-7 * a + 9) * r1 + R(1) / 4320 * (-a + 9)) * t +
                        (R(1) / 12960 * (a - 15) * r1 + R(1) / 4320 * (a + 3))
                    ) * b1 + (
                        (R(1) / 1080 * (a - 6) * r1 + R(1) / 360) * t^2 +
                        (R(1) / 2160 * a * r1 + R(1) / 720) * t +
                        (R(1) / 2160 * (-a + 6) * r1 - R(1) / 720)
                    )
                ) * b2^2 +
                (
                    (
                        (R(1) / 1080 * (2 * a - 15) * r1 + R(1) / 360 * (a - 2)) * t^2 +
                        (R(1) / 2160 * (-a + 6) * r1 + R(1) / 720) * t +
                        (R(1) / 2160 * (-2 * a + 15) * r1 + R(1) / 720 * (-a + 2))
                    ) * b1 + (
                        (R(1) / 360 * (-a + 7) * r1 + R(1) / 360 * (a - 1)) * t^2 +
                        (R(1) / 720 * (a - 5) * r1 + R(1) / 720 * (-a - 1)) * t +
                        (R(1) / 720 * (a - 7) * r1 + R(1) / 720 * (-a + 1))
                    )
                ) * b2 +
                (
                    (
                        (R(1) / 540 * (a - 20) * r1 + R(1) / 180 * (2 * a + 3)) * t^2 +
                        (R(1) / 1080 * (9 * a - 29) * r1 + R(1) / 120 * (a - 3)) * t +
                        (R(1) / 2160 * (-4 * a + 55) * r1 + R(1) / 720 * (-5 * a - 6))
                    ) * b1 + (
                        (R(1) / 180 * (-3 * a + 7) * r1 + R(1) / 180 * (-a - 1)) * t^2 +
                        (R(1) / 180 * (-2 * a + 5) * r1 + R(1) / 180 * (a - 8)) * t +
                        (R(1) / 720 * (7 * a - 29) * r1 + R(1) / 720 * (-a + 17))
                    )
                )
            ) * im +
            (
                (
                    (R(1) / 2160 * (-a + 5) * r1 + R(1) / 2160 * (-5 * a + 11)) * t^2 +
                    (R(1) / 4320 * (a - 1) * r1 + R(1) / 4320 * (3 * a - 13)) * t +
                    (R(1) / 4320 * (a - 5) * r1 + R(1) / 4320 * (5 * a - 11))
                ) * b1 + (
                    (R(1) / 360 * r1 + R(1) / 360 * (a - 2)) * t^2 +
                    (-R(1) / 720 * r1 + R(1) / 720 * (-a + 4)) * t +
                    (-R(1) / 720 * r1 + R(1) / 720 * (-a + 2))
                )
            ) * b2^2 +
            (
                (
                    (R(1) / 1080 * a * r1 - R(1) / 360) * t^2 +
                    (R(1) / 2160 * (-2 * a + 3) * r1 + R(1) / 720 * (-a + 8)) * t +
                    (-R(1) / 2160 * a * r1 + R(1) / 720)
                ) * b1 + (
                    (R(1) / 1080 * (-a - 3) * r1 + R(1) / 360 * (a - 3)) * t^2 +
                    (R(1) / 2160 * (-a + 3) * r1 + R(1) / 720 * (a - 9)) * t +
                    (R(1) / 2160 * (a + 3) * r1 + R(1) / 720 * (-a + 3))
                )
            ) * b2 +
            (
                (R(1) / 540 * (-2 * a - 15) * r1 + R(1) / 540 * (11 * a + 12)) * t^2 +
                (R(1) / 1080 * (a + 3) * r1 + R(1) / 1080 * (-7 * a + 9)) * t +
                (R(1) / 2160 * (a + 30) * r1 + R(1) / 2160 * (-16 * a - 39))
            ) * b1 +
            (R(1) / 180 * (-a - 1) * r1 + R(1) / 180 * (-a - 3)) * t^2 +
            (R(1) / 60 * r1 + R(1) / 180 * (a - 12)) * t +
            R(1) / 240 * (a - 1) * r1 +
            R(1) / 720 * (-7 * a + 21),
            (R(1) / 360 * a * r1 + R(1) / 360 * (2 * a - 15)) * b1 +
            R(1) / 360 * (a - 5) * r1 +
            R(1) / 120 * (-3 * a + 5),
            (
                (
                    (
                        (-R(1) / 810 * a * r1 + R(1) / 1080 * (-a + 9)) * t^2 +
                        (R(1) / 3240 * (a - 3) * r1 + R(1) / 1080 * (a - 3)) * t +
                        (R(1) / 1620 * a * r1 + R(1) / 2160 * (a - 9))
                    ) * b1 + (-R(1) / 180 * t^2 + R(1) / 180 * t + R(1) / 360)
                ) * b2^2 +
                (
                    (R(1) / 180 * t^2 + (R(1) / 180 * r1 + R(1) / 360 * (-a + 1)) * t - R(1) / 360) * b1 +
                    (R(1) / 180 * (a + 1) * t^2 - R(1) / 180 * t + R(1) / 360 * (-a - 1))
                ) * b2 +
                (
                    (
                        (R(1) / 540 * (6 * a + 5) * r1 + R(1) / 60 * (a - 6)) * t^2 +
                        (R(1) / 540 * (-a + 1) * r1 + R(1) / 90 * (-a + 3)) * t +
                        (R(1) / 216 * (-a - 4) * r1 + R(1) / 360 * (-a + 18))
                    ) * b1 + (
                        (R(1) / 180 * (3 * a - 5) * r1 + R(1) / 180 * (-a + 17)) * t^2 +
                        (R(1) / 180 * (-a + 5) * r1 + R(1) / 180 * (a - 17)) * t +
                        (R(1) / 72 * (-a + 1) * r1 + R(1) / 360 * (a - 17))
                    )
                )
            ) * im +
            (
                (
                    (R(1) / 1080 * (a - 1) * r1 - R(1) / 270) * t^2 +
                    (-R(1) / 540 * r1 + R(1) / 1080 * (a + 1)) * t +
                    (R(1) / 2160 * (-a + 1) * r1 + R(1) / 540)
                ) * b1 + (R(1) / 180 * r1 * t^2 - R(1) / 360 * r1)
            ) * b2^2 +
            (
                (
                    (R(1) / 540 * (-2 * a + 3) * r1 + R(1) / 45) * t^2 +
                    (R(1) / 1080 * (a - 3) * r1 - R(1) / 180) * t +
                    (R(1) / 1080 * (2 * a - 3) * r1 - R(1) / 90)
                ) * b1 + (R(1) / 540 * (a - 3) * r1 * t^2 - R(1) / 540 * a * r1 * t + R(1) / 1080 * (-a + 3) * r1)
            ) * b2 +
            (
                (R(1) / 540 * (-7 * a + 6) * r1 + R(1) / 540 * (-2 * a + 39)) * t^2 +
                (R(1) / 540 * (a + 12) * r1 + R(1) / 540 * (-7 * a - 6)) * t +
                (R(1) / 540 * (2 * a - 3) * r1 + R(1) / 1080 * (-a - 9))
            ) * b1 +
            (R(1) / 180 * (-a - 7) * r1 + R(1) / 180 * (a - 15)) * t^2 +
            R(1) / 90 * a * t +
            R(1) / 30 * r1 +
            R(1) / 180 * a,
            (
                (
                    (
                        (R(1) / 6480 * (-7 * a + 9) * r1 + R(1) / 2160 * (-a + 9)) * t^2 +
                        (R(1) / 1620 * (a - 3) * r1 + R(1) / 2160 * (a - 3)) * t +
                        (R(1) / 12960 * (7 * a - 9) * r1 + R(1) / 4320 * (a - 9))
                    ) * b1 + (
                        (R(1) / 1080 * a * r1 + R(1) / 360) * t^2 +
                        (R(1) / 1080 * (-a + 3) * r1 - R(1) / 360) * t +
                        (-R(1) / 2160 * a * r1 - R(1) / 720)
                    )
                ) * b2^2 +
                (
                    (
                        (R(1) / 1080 * (-a + 6) * r1 + R(1) / 360) * t^2 +
                        (R(1) / 2160 * (-a + 9) * r1 + R(1) / 720 * (-a + 1)) * t +
                        (R(1) / 2160 * (a - 6) * r1 - R(1) / 720)
                    ) * b1 + (
                        (R(1) / 360 * (a - 5) * r1 + R(1) / 360 * (-a - 1)) * t^2 +
                        (-R(1) / 360 * r1 + R(1) / 360) * t +
                        (R(1) / 720 * (-a + 5) * r1 + R(1) / 720 * (a + 1))
                    )
                ) * b2 +
                (
                    (
                        (R(1) / 540 * (9 * a - 29) * r1 + R(1) / 60 * (a - 3)) * t^2 +
                        (R(1) / 1080 * (-10 * a + 49) * r1 + R(1) / 360 * (-5 * a + 6)) * t +
                        (R(1) / 2160 * (-20 * a + 73) * r1 + R(1) / 720 * (-7 * a + 18))
                    ) * b1 + (
                        (R(1) / 90 * (-2 * a + 5) * r1 + R(1) / 90 * (a - 8)) * t^2 +
                        (R(1) / 360 * (7 * a - 17) * r1 + R(1) / 360 * (-a + 17)) * t +
                        (R(1) / 720 * (9 * a - 35) * r1 + R(1) / 720 * (-7 * a + 47))
                    )
                )
            ) * im +
            (
                (
                    (R(1) / 2160 * (a - 1) * r1 + R(1) / 2160 * (3 * a - 13)) * t^2 +
                    (-R(1) / 1080 * r1 + R(1) / 2160 * (a + 1)) * t +
                    (R(1) / 4320 * (-a + 1) * r1 + R(1) / 4320 * (-3 * a + 13))
                ) * b1 + (
                    (-R(1) / 360 * r1 + R(1) / 360 * (-a + 4)) * t^2 - R(1) / 360 * t +
                    R(1) / 720 * r1 +
                    R(1) / 720 * (a - 4)
                )
            ) * b2^2 +
            (
                (
                    (R(1) / 1080 * (-2 * a + 3) * r1 + R(1) / 360 * (-a + 8)) * t^2 +
                    (R(1) / 2160 * (a - 3) * r1 + R(1) / 720 * (a - 7)) * t +
                    (R(1) / 2160 * (2 * a - 3) * r1 + R(1) / 720 * (a - 8))
                ) * b1 + (
                    (R(1) / 1080 * (-a + 3) * r1 + R(1) / 360 * (a - 9)) * t^2 +
                    (R(1) / 1080 * a * r1 + R(1) / 360 * (-a + 6)) * t +
                    (R(1) / 2160 * (a - 3) * r1 + R(1) / 720 * (-a + 9))
                )
            ) * b2 +
            (
                (R(1) / 540 * (a + 3) * r1 + R(1) / 540 * (-7 * a + 9)) * t^2 +
                (R(1) / 1080 * (a + 12) * r1 + R(1) / 1080 * (-4 * a - 21)) * t +
                (R(1) / 2160 * (-5 * a - 6) * r1 + R(1) / 2160 * (20 * a - 33))
            ) * b1 +
            (R(1) / 30 * r1 + R(1) / 90 * (a - 12)) * t^2 +
            (R(1) / 360 * (a - 5) * r1 + R(1) / 360 * (-a + 27)) * t +
            R(1) / 720 * (a - 17) * r1 +
            R(1) / 720 * (-13 * a + 63),
            (-R(1) / 72 * r1 + R(1) / 120 * a) * b1 * im +
            (-R(1) / 360 * a * r1 + R(1) / 360 * (-2 * a + 15)) * b1 +
            R(1) / 180 * (-a + 5) * r1 +
            R(1) / 60 * (a - 5),
            (
                (
                    (
                        (R(1) / 1620 * (a + 3) * r1 + R(1) / 1080 * (-a - 3)) * t^2 +
                        (-R(1) / 1620 * a * r1 + R(1) / 2160 * (-a + 9)) * t +
                        (R(1) / 3240 * (-a - 3) * r1 + R(1) / 2160 * (a + 3))
                    ) * b1 + (-R(1) / 180 * t^2 - R(1) / 360 * t + R(1) / 360)
                ) * b2^2 +
                (
                    (
                        (-R(1) / 90 * r1 + R(1) / 180 * (a - 2)) * t^2 +
                        R(1) / 360 * t +
                        (R(1) / 180 * r1 + R(1) / 360 * (-a + 2))
                    ) * b1 + (R(1) / 180 * (-a + 1) * t^2 + R(1) / 360 * (a + 1) * t + R(1) / 360 * (a - 1))
                ) * b2 +
                (
                    (
                        (R(1) / 540 * (-4 * a - 7) * r1 + R(1) / 180 * (a + 6)) * t^2 +
                        (R(1) / 1080 * (6 * a + 5) * r1 + R(1) / 120 * (a - 6)) * t +
                        (R(1) / 1080 * (5 * a - 8) * r1 + R(1) / 360 * (a - 6))
                    ) * b1 + (
                        (R(1) / 180 * (-a - 5) * r1 + R(1) / 180 * (-a + 17)) * t^2 +
                        (R(1) / 360 * (3 * a - 5) * r1 + R(1) / 360 * (-a + 17)) * t +
                        (R(1) / 360 * (-a + 5) * r1 + R(1) / 360 * (a - 17))
                    )
                )
            ) * im +
            (
                (
                    (R(1) / 1080 * (-a + 5) * r1 + R(1) / 540 * (-a + 1)) * t^2 +
                    (R(1) / 2160 * (a - 1) * r1 - R(1) / 540) * t +
                    (R(1) / 2160 * (a - 5) * r1 + R(1) / 1080 * (a - 1))
                ) * b1 + (-R(1) / 180 * r1 * t^2 + R(1) / 360 * r1 * t + R(1) / 360 * r1)
            ) * b2^2 +
            (
                (
                    (R(1) / 540 * a * r1 - R(1) / 90) * t^2 +
                    (R(1) / 1080 * (-2 * a + 3) * r1 + R(1) / 90) * t +
                    (-R(1) / 1080 * a * r1 + R(1) / 180)
                ) * b1 +
                (R(1) / 540 * (a + 3) * r1 * t^2 + R(1) / 1080 * (a - 3) * r1 * t + R(1) / 1080 * (-a - 3) * r1)
            ) * b2 +
            (
                (R(1) / 108 * (a - 6) * r1 + R(1) / 540 * (16 * a - 27)) * t^2 +
                (R(1) / 1080 * (-7 * a + 6) * r1 + R(1) / 1080 * (-2 * a + 39)) * t +
                (R(1) / 540 * (-4 * a + 15) * r1 + R(1) / 1080 * (-19 * a + 57))
            ) * b1 +
            (R(1) / 180 * (a + 7) * r1 + R(1) / 36 * (-a + 3)) * t^2 +
            (R(1) / 360 * (-a - 7) * r1 + R(1) / 360 * (a - 15)) * t +
            R(1) / 180 * (-a - 1) * r1 +
            R(1) / 180 * (4 * a - 15),
            (
                (
                    (
                        (R(1) / 810 * (a - 3) * r1 + R(1) / 1080 * (a - 3)) * t^2 +
                        (R(1) / 12960 * (-a + 15) * r1 + R(1) / 4320 * (-a - 3)) * t +
                        (R(1) / 1620 * (-a + 3) * r1 + R(1) / 2160 * (-a + 3))
                    ) * b1 + (
                        (R(1) / 540 * (-a + 3) * r1 - R(1) / 180) * t^2 +
                        (R(1) / 2160 * (a - 6) * r1 + R(1) / 720) * t +
                        (R(1) / 1080 * (a - 3) * r1 + R(1) / 360)
                    )
                ) * b2^2 +
                (
                    (
                        (R(1) / 1080 * (-a + 9) * r1 + R(1) / 360 * (-a + 1)) * t^2 +
                        (R(1) / 2160 * (2 * a - 15) * r1 + R(1) / 720 * (a - 2)) * t +
                        (R(1) / 2160 * (a - 9) * r1 + R(1) / 720 * (a - 1))
                    ) * b1 + (
                        (-R(1) / 180 * r1 + R(1) / 180) * t^2 +
                        (R(1) / 720 * (-a + 7) * r1 + R(1) / 720 * (a - 1)) * t +
                        (R(1) / 360 * r1 - R(1) / 360)
                    )
                ) * b2 +
                (
                    (
                        (R(1) / 540 * (-10 * a + 49) * r1 + R(1) / 180 * (-5 * a + 6)) * t^2 +
                        (R(1) / 1080 * (a - 20) * r1 + R(1) / 360 * (2 * a + 3)) * t +
                        (R(1) / 2160 * (18 * a - 83) * r1 + R(1) / 240 * (3 * a - 4))
                    ) * b1 + (
                        (R(1) / 180 * (7 * a - 17) * r1 + R(1) / 180 * (-a + 17)) * t^2 +
                        (R(1) / 360 * (-3 * a + 7) * r1 + R(1) / 360 * (-a - 1)) * t +
                        (R(1) / 720 * (-13 * a + 19) * r1 + R(1) / 720 * (-a - 19))
                    )
                )
            ) * im +
            (
                (
                    (-R(1) / 540 * r1 + R(1) / 1080 * (a + 1)) * t^2 +
                    (R(1) / 4320 * (-a + 5) * r1 + R(1) / 4320 * (-5 * a + 11)) * t +
                    (R(1) / 1080 * r1 + R(1) / 2160 * (-a - 1))
                ) * b1 + (-R(1) / 180 * t^2 + (R(1) / 720 * r1 + R(1) / 720 * (a - 2)) * t + R(1) / 360)
            ) * b2^2 +
            (
                (
                    (R(1) / 1080 * (a - 3) * r1 + R(1) / 360 * (a - 7)) * t^2 +
                    (R(1) / 2160 * a * r1 - R(1) / 720) * t +
                    (R(1) / 2160 * (-a + 3) * r1 + R(1) / 720 * (-a + 7))
                ) * b1 + (
                    (R(1) / 540 * a * r1 + R(1) / 180 * (-a + 6)) * t^2 +
                    (R(1) / 2160 * (-a - 3) * r1 + R(1) / 720 * (a - 3)) * t +
                    (-R(1) / 1080 * a * r1 + R(1) / 360 * (a - 6))
                )
            ) * b2 +
            (
                (R(1) / 540 * (a + 12) * r1 + R(1) / 540 * (-4 * a - 21)) * t^2 +
                (R(1) / 1080 * (-2 * a - 15) * r1 + R(1) / 1080 * (11 * a + 12)) * t +
                (R(1) / 2160 * (-5 * a - 24) * r1 + R(1) / 2160 * (14 * a + 27))
            ) * b1 +
            (R(1) / 180 * (a - 5) * r1 + R(1) / 180 * (-a + 27)) * t^2 +
            (R(1) / 360 * (-a - 1) * r1 + R(1) / 360 * (-a - 3)) * t +
            R(1) / 720 * (-a + 5) * r1 +
            R(1) / 720 * (-7 * a - 39)
        ]
    else
        throw(ArgumentError(string("Invalid input dimension d = ", d)))
    end
end

_fiducial_WH(d::Integer) = _fiducial_WH(ComplexF64, d)
